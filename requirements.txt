Requirements
Hash table of Roman Numerals
  I 1
  V 5
  X 10
  L 50
  C 100
  D 500
  M 1,000

It converts a symbol to an int

It converts an into to a symbol
  - A number written in [16]Arabic numerals can be broken into digits. For example, 1903 is composed of 1, 9, 0, and 3. To write the Roman numeral, each of the non-zero digits should be treated separately. Inthe above example, 1,000 = M, 900 = CM, and 3 = III. Therefore, 1903 = MCMIII

Given a combination of symbols, can find a sum
  When smaller values precede larger values, the smaller values are subtracted from the larger values, and the result is added to the total.

Input
  It can parse a file from an path via arg in command line
  It can detect if a line is to Roman(glob is I), to Arabic(glob glob Silver is 34 Credits), or totaling(how many Credits is glob prok Silver ?)

  # str.scan(/glob/).count
  case line
  when /\w{4}\sis\s[A-Z]+$/
  when /is\s\d+\sCredits$/
  when /^how much is/
  when ^how many Credits

  currency_lines = lines.select { |line| line =~ /\w{4}\sis\s[A-Z]+$/ }
  CurrencyRepo.new(currency_lines)
    def init(lines)
      @currences = set_currencies(lines)

    #total(glob: 1, prok: 2, ...)

    def set_currencies(lines)
      lines.each_with_object({}) do |line, obj|
        currency = str.match(/glob|prok|pish|tegj/)[0]
        numeral = line.split(' ').last
        @obj[currency] = numeral

  mineral_lines = lines.select { |line| line =~ /is\s\d+\sCredits$/ }
  MineralRepo.new(mineral_lines)

  class MineralRepo
    def init(lines)
      @minerals = set_minerals(lines)

      def set_currencies(lines)
        lines.each_with_object({}) do |line, obj|
        globs = line.scan(/glob/).count
        currencies = line.split(/\s/gold|silver|iron/i)
        mineral = line.match(/gold|silver|iron/i)[0]
        total_cost = line.match(/\n/)
        total_globs = CurrencyRepo.new.currencies[glob] * globs
        obj[mineral] = total_cost / total_globs


  # how many Credits is glob prok Silver
  roman_total = currency_repo.to_roman( glob: 1, prok: 1)
  romant_total.to_arabic * mineral_repo.silver



Architecture
class RomanNumeral
  def initialize(symbol)

  def to_arabic

class Arabic
  def initialize(number)

  def to_roman
